// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package styletransfer.actions;

import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import javax.imageio.ImageIO;
import com.mendix.core.Core;
import com.mendix.mlkit.MLKit;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class AugmentedImagePostProcessor extends CustomJavaAction<IMendixObject>
{
	private IMendixObject __image;
	private styletransfer.proxies.ML_Output_Entity_Mosaic_ML_Model image;

	public AugmentedImagePostProcessor(IContext context, IMendixObject image)
	{
		super(context);
		this.__image = image;
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		this.image = this.__image == null ? null : styletransfer.proxies.ML_Output_Entity_Mosaic_ML_Model.initialize(getContext(), __image);

		// BEGIN USER CODE
		final float[][][][] augmentedImageArray = new float[1][3][224][224];
		final InputStream is = MLKit.fromBase64(image.getOutput1());
		MLKit.toArray(is, augmentedImageArray);
		//MLKit.fromBase64(image.getOutput1(), augmentedImageArray);
		for (int i = 0; i < 1; i++) {
			for (int j = 0; j < 3; j++) {
				for (int m = 0; m < 224; m++) {
					for (int n = 0; n < 224; n++) {
						augmentedImageArray[i][j][m][n] = Math.min(Math.max(0, augmentedImageArray[i][j][m][n]), 255);
					}
				}
			}
		}
		final BufferedImage bufferedImage = new BufferedImage(224, 224, BufferedImage.TYPE_INT_RGB);
		for (int i = 0; i < 224; i++) {
			for (int j = 0; j < 224; j++) {
				final int red = (int) augmentedImageArray[0][0][i][j];
				final int green = (int) augmentedImageArray[0][1][i][j];
				final int blue = (int) augmentedImageArray[0][2][i][j];
				final Color color = new Color(red, green, blue);
				bufferedImage.setRGB(j, i, color.getRGB());
			}
		}
		final ByteArrayOutputStream bos = new ByteArrayOutputStream();
		ImageIO.write(bufferedImage, "jpeg", bos);
		final byte[] binaryImage = bos.toByteArray();
		final ByteArrayInputStream bis = new ByteArrayInputStream(binaryImage);

		final IMendixObject mxObject = Core.instantiate(getContext(), "StyleTransfer.AugmentedImage");
		final styletransfer.proxies.AugmentedImage augmentedImage = styletransfer.proxies.AugmentedImage.initialize(getContext(), mxObject);
		augmentedImage.setContents(getContext(), bis, binaryImage.length);
		return augmentedImage.getMendixObject();
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "AugmentedImagePostProcessor";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
