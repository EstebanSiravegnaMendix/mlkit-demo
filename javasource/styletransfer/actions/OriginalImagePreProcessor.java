// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package styletransfer.actions;

import java.awt.Color;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import com.mendix.core.Core;
import com.mendix.mlkit.MLKit;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import styletransfer.proxies.ML_Input_Entity_Mosaic_ML_Model;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import javax.imageio.ImageIO;

public class OriginalImagePreProcessor extends CustomJavaAction<IMendixObject>
{
	private IMendixObject __image;
	private styletransfer.proxies.OriginalImage image;

	public OriginalImagePreProcessor(IContext context, IMendixObject image)
	{
		super(context);
		this.__image = image;
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		this.image = this.__image == null ? null : styletransfer.proxies.OriginalImage.initialize(getContext(), __image);

		// BEGIN USER CODE
		
		// 1. read image
		final ByteArrayOutputStream bos = new ByteArrayOutputStream();
		image.getContents(getContext(), bos);
		final byte[] binaryImage = bos.toByteArray();
		// 2. resize image to 224x224
		final ByteArrayInputStream bis = new ByteArrayInputStream(binaryImage);
		final BufferedImage originalImage = ImageIO.read(bis);
		final BufferedImage resizedImage = resizeImage(originalImage, 224, 224);
		// 3. transform resized image to input feature
		final IMendixObject mxObject = Core.instantiate(getContext(), "StyleTransfer.ML_Input_Entity_Mosaic_ML_Model"); 
		final ML_Input_Entity_Mosaic_ML_Model inputObject = ML_Input_Entity_Mosaic_ML_Model.initialize(getContext(), mxObject);
		final float[][][][] inputFeature = new float[1][3][224][224];
		for(int i = 0; i < 224; i++) {
			for(int j = 0; j < 224; j++) {
				final Color color = new Color(resizedImage.getRGB(j, i));
				inputFeature[0][0][i][j] = color.getRed();
				inputFeature[0][1][i][j] = color.getGreen();
				inputFeature[0][2][i][j] = color.getBlue();
			}
		}
		final InputStream is = MLKit.toInputStream(inputFeature);
		final String base64 = MLKit.toBase64(is);
		inputObject.setInput1(base64);
		
		return inputObject.getMendixObject();
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "OriginalImagePreProcessor";
	}

	// BEGIN EXTRA CODE
	private BufferedImage resizeImage(BufferedImage originalImage, Integer targetWidth, Integer targetHeight) {
		final Image resultingImage = originalImage.getScaledInstance(targetWidth, targetHeight, Image.SCALE_DEFAULT);
		final BufferedImage outputImage  = new BufferedImage(targetWidth, targetHeight, BufferedImage.TYPE_INT_RGB);
		outputImage.getGraphics().drawImage(resultingImage, 0, 0, null);
		return outputImage;
	}
	// END EXTRA CODE
}
