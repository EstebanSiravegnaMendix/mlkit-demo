// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package bert.actions;

import com.mendix.core.Core;
import com.mendix.mlkit.MLKit;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import java.io.InputStream;
import java.util.Map;

public class BERT_PreProcessor extends CustomJavaAction<IMendixObject>
{
	private IMendixObject __Parameter;
	private bert.proxies.PredictRequest Parameter;

	public BERT_PreProcessor(IContext context, IMendixObject Parameter)
	{
		super(context);
		this.__Parameter = Parameter;
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		this.Parameter = this.__Parameter == null ? null : bert.proxies.PredictRequest.initialize(getContext(), __Parameter);

		// BEGIN USER CODE
		Feature feature = featureConverter.convert(Parameter.getQuestion(), Parameter.getQuestionContext());
		
		long[] qid = new long[] {1};
		long[][] segmentIds = new long[1][MAX_SEQ_LEN];
		long[][] inputMask = new long[1][MAX_SEQ_LEN];
		long[][] inputIds = new long[1][MAX_SEQ_LEN];
		
		for (int j = 0; j < MAX_SEQ_LEN; j++) {
			segmentIds[0][j] = feature.segmentIds[j];
			inputMask[0][j] = feature.inputMask[j];
			inputIds[0][j] = feature.inputIds[j];
		}
		
		InputStream qidIs = MLKit.toInputStream(qid);
		InputStream inputIdsIs = MLKit.toInputStream(inputIds);
		InputStream inputMaskIs = MLKit.toInputStream(inputMask);
		InputStream segmentIdsIs = MLKit.toInputStream(segmentIds);
		
		final IMendixObject outputObject = Core.instantiate(getContext(), "BERT.ML_Input_Entity_BERT_mapping");
		outputObject.setValue(getContext(), "Unique_ids_raw_output___9_0", MLKit.toBase64(qidIs));
		outputObject.setValue(getContext(), "Segment_ids_0", MLKit.toBase64(segmentIdsIs));
		outputObject.setValue(getContext(), "Input_mask_0", MLKit.toBase64(inputMaskIs));
		outputObject.setValue(getContext(), "Input_ids_0", MLKit.toBase64(inputIdsIs));
		
		return outputObject;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "BERT_PreProcessor";
	}

	// BEGIN EXTRA CODE
	private static final Map<String, Integer> dic = LoadDatasetClient.loadDictionary();
	private static final boolean DO_LOWER_CASE = true;
	private static final int MAX_SEQ_LEN = 256;
	private static final int MAX_QUERY_LEN = 64;
	public static final FeatureConverter featureConverter = new FeatureConverter(dic, DO_LOWER_CASE, MAX_QUERY_LEN, MAX_SEQ_LEN);
	// END EXTRA CODE
}
