// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package resnet50.actions;

import java.io.File; // the following libraries are required for accessing files and using MLKit
import java.io.InputStream;
import java.nio.file.Paths;
import java.util.Map;
import java.util.Scanner;
import com.mendix.core.Core;
import com.mendix.mlkit.MLKit;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class ResNet50Postprocessor extends CustomJavaAction<java.lang.String>
{
	private IMendixObject __ResnetCategory;
	private resnet50.proxies.ML_Output_Entity_ResNet50ModelMapping ResnetCategory;

	public ResNet50Postprocessor(IContext context, IMendixObject ResnetCategory)
	{
		super(context);
		this.__ResnetCategory = ResnetCategory;
	}

	@java.lang.Override
	public java.lang.String executeAction() throws Exception
	{
		this.ResnetCategory = this.__ResnetCategory == null ? null : resnet50.proxies.ML_Output_Entity_ResNet50ModelMapping.initialize(getContext(), __ResnetCategory);

		// BEGIN USER CODE
		// convert base64 to array
		float[] outputScores = new float[1000];
		// decode InputStream from Base64
		final InputStream is = MLKit.fromBase64(ResnetCategory.getResnetv17_dense0_fwd());
		// read InputStream and write to provided array
		MLKit.toArray(is, outputScores);
		// find index of Top 1 
		float max = Integer.MIN_VALUE;
		int index = 0;
		for(int i = 0; i < outputScores.length; i++) {
			if(outputScores[i] > max) {
				max = outputScores[i];
				index = i;
			}
		}
		
		String result = classes.get(index);
		Core.getLogger("ResNet50 result:").info(result);
		return result;

		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "ResNet50Postprocessor";
	}

	// BEGIN EXTRA CODE

	// Just a way to read a file from a specific location, build a hashmap and return the results.
	// The path is relative to the java actions in the module, it is hardcoded with the module name, 
	// and contains the the table in the index:class name <nl/clr> format
	
	final Map<Integer, String> classes = new java.util.HashMap<>();

	{
		try {
			File basePath = new File(Core.getConfiguration().getBasePath(), "ml");
			File filePath = Paths.get("resnet50", "imagenet_classes.txt").toFile();
			final File classesFile = new File(basePath, filePath.getPath());
			Scanner reader = new Scanner(classesFile);
			while (reader.hasNextLine()) {
				String line = reader.nextLine();
				String[] split = line.split(":");
				Integer id = Integer.valueOf(split[0].trim());
				String cls = split[1].trim();
				classes.put(id, cls);
			}
			reader.close();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	// END EXTRA CODE
}
